-- session_number is not generated by system
CREATE OR REPLACE PROCEDURE add_session(IN cid INT, IN session_number INT, IN session_date DATE, IN start_hour TIME, IN eid INT, IN rid INT)
AS $$
DECLARE
    course_deadline DATE;
    s_launch_date DATE;
    span TIME;
BEGIN
    SELECT DISTINCT registration_deadline, launch_date, duration INTO course_deadline, s_launch_date, span FROM Offerings WHERE course_id = cid;

    IF (session_date > course_deadline) THEN
        RAISE EXCEPTION 'Course registration deadline have already PASSED!';
    END IF;
    INSERT INTO Sessions VALUES (session_number, s_launch_date, cid, session_date, start_hour, start_hour + span, rid, eid);
END;
$$ LANGUAGE plpgsql;


-- TODO: Trigger - to enforce total participation, every Offerings has >= 1 Sessions (CONSTRAINT TYPE) (PERSPECTIVE: OFFERINGS?)
-- TODO: Trigger - start date and end date of Offerings is updated to the earliest and latest session_date (UPDATE TYPE)
-- TODO: Trigger - each instructor at most one course session at any hour (CONSTRAINT TYPE) (Done)
-- TODO: Trigger - each instructor must not teach 2 consecutive sessions (1 hr break) (CONSTRAINT TYPE) (Done)
-- TODO: Trigger - each part-time instructor total hours per month <= 30 (CONSTRAINT TYPE) (Done)
-- TODO: Trigger - the assigned instructor must specialise in that course_area (CONSTRAINT TYPE) (Done)
-- TODO: Trigger - update seating_capacity in Offerings to sum of seating capacities of sessions (UPDATE TYPE)
-- TODO: Trigger - Each room can be used to conduct at most one course session at any time (CONSTRAINT TYPE) (Done)
CREATE OR REPLACE FUNCTION add_session_trigger()
    RETURNS TRIGGER AS $$
DECLARE
    max_hour time;
    span time;
    area text;
    one_hour time;
BEGIN
    one_hour := concat(1, ' hours')::interval;
    max_hour := concat(30, ' hours')::interval;
    SELECT DISTINCT duration, area_name INTO span, area FROM Courses WHERE cid = NEW.course_id;

    -- VALIDATE SPECIALIZATION
    IF (NEW.eid NOT IN (SELECT DISTINCT eid FROM Specializes WHERE area_name = area)) THEN
        RAISE EXCEPTION 'Instructor is not specializing in this course area';
    END IF;

    -- VALIDATE PART-TIME INSTRUCTOR
    IF (NEW.eid IN (SELECT eid FROM Part_time_instructors) AND ((concat((SELECT get_hours(NEW.eid)), ' hours')) + span > max_hour)) THEN
        RAISE EXCEPTION 'This part-time instructor is going to be OVERWORKED if he take this session!';
    END IF;

    -- VALIDATE AT MOST ONE COURSE SESSION AT ANY HOUR AND NOT TEACH 2 CONSECUTIVE SESSIONS
    IF (EXISTS(SELECT 1 FROM Sessions S WHERE S.session_date = NEW.session_date AND S.eid = NEW.eid
                                          AND (NEW.start_time, NEW.end_time) OVERLAPS (S.start_time - one_hour, S.end_time + one_hour))) THEN
        RAISE EXCEPTION 'This instructor is either teaching in this timing or he is having consecutive sessions!';
    END IF;

    -- VALIDATE THE ROOM AVAILABILITY
    IF (EXISTS (SELECT 1 FROM Sessions S WHERE S.session_date = NEW.session_date AND S.start_time = NEW.start_time AND S.rid = NEW.rid)) THEN
        RAISE EXCEPTION 'This room is already taken by another session';
    END IF;

    /*
     * TODO update should occur here.
     */

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

DROP TRIGGER add_session_trigger on Sessions;

-- this trigger essentially checks only when we are trying to add a new session
CREATE TRIGGER add_session_trigger
    BEFORE INSERT ON Sessions
    FOR EACH ROW EXECUTE FUNCTION add_session_trigger();