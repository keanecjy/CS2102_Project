-- session_number is not generated by system
-- TODO: Trigger - to enforce total participation, every Offerings has >= 1 Sessions (CONSTRAINT TYPE) (PERSPECTIVE: OFFERINGS?)
-- TODO: Trigger - start date and end date of Offerings is updated to the earliest and latest session_date (UPDATE TYPE) (Done)
-- TODO: Trigger - update seating_capacity in Offerings to sum of seating capacities of sessions (UPDATE TYPE)  (Done)
CREATE OR REPLACE PROCEDURE add_session(IN cid INT, IN session_number INT, IN session_date DATE, IN start_hour TIME, IN eid INT, IN rid INT)
AS $$
DECLARE
    course_deadline DATE;
    s_launch_date DATE;
    span TIME;
    min_date DATE;
    max_date DATE;
BEGIN
    SELECT DISTINCT registration_deadline, launch_date, duration INTO course_deadline, s_launch_date, span FROM Offerings WHERE course_id = cid;

    IF (current_date > course_deadline) THEN
        RAISE EXCEPTION 'Course registration deadline have already PASSED!';
    END IF;
    INSERT INTO Sessions VALUES (session_number, s_launch_date, cid, session_date, start_hour, start_hour + span, rid, eid);

    -- find the maxs and min of the session_date from that particular course
    SELECT min(session_date), max(session_date) into min_date, max_date FROM Sessions WHERE Sessions.course_id = cid;

    -- updates the start and end date of Offerings
    UPDATE Offerings SET start_date = min_date WHERE course_id = cid;

    UPDATE Offerings SET end_date = max_date WHERE course_id = cid;

    -- updates the seating_capacity in Offerings to sum of seating capacity of sesions
    UPDATE Offerings SET seating_capacity = (
        SELECT SUM(Q1.seating_capacity) FROM (Rooms NATURAL JOIN Sessions) AS Q1 WHERE Q1.course_id = cid
    ) WHERE course_id = cid;
END;
$$ LANGUAGE plpgsql;
