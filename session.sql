-- session_number is not generated by system
-- Trigger - to enforce total participation, every Offerings has >= 1 Sessions (CONSTRAINT TYPE) (PERSPECTIVE: OFFERINGS?)
-- Trigger - start date and end date of Offerings is updated to the earliest and latest session_date (UPDATE TYPE) (Done)
-- Trigger - update seating_capacity in Offerings to sum of seating capacities of sessions (UPDATE TYPE)  (Done)
-- Trigger - the assigned instructor must specialise in that course_area (CONSTRAINT TYPE) (Done) (in instructors_specialization_checks)
-- Trigger - each part-time instructor total hours per month <= 30 (CONSTRAINT TYPE) (Done) (in instructors_part_time_duration_checks)
-- Trigger - each instructor at most one course session at any hour (CONSTRAINT TYPE) (Done) (in instructors_overlap_timing_checks)
-- Trigger - each instructor must not teach 2 consecutive sessions (1 hr break) (CONSTRAINT TYPE) (Done) (in instructors_overlap_timing_checks)
-- Trigger - Each room can be used to conduct at most one course session at any time (CONSTRAINT TYPE) (Done) (in room_availability_checks)
-- Trigger - New sessions added should not collide with lunch time or start or end timing (IN new_session_timing_collision_checks)
-- Trigger - Course offering have to exist first before adding session (in course_offering_exists)
CREATE OR REPLACE PROCEDURE add_session(in_cid INT, date_of_launch DATE, session_number INT, in_session_date DATE, in_start_hour TIME, in_eid INT, in_rid INT)
AS $$
DECLARE
    span interval;
BEGIN
    SELECT DISTINCT concat(duration, ' hours')::interval INTO span
    FROM Courses
    WHERE course_id = in_cid;

    INSERT INTO Sessions VALUES (session_number, date_of_launch, in_cid, in_session_date, in_start_hour, in_start_hour + span, in_rid, in_eid);

END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE remove_session(in_cid INT, date_of_launch DATE, in_sid INT)
AS $$
BEGIN
    IF (NOT EXISTS(SELECT 1 FROM Sessions WHERE (course_id, launch_date, sid) = (in_cid, date_of_launch, in_sid))) THEN
        RAISE EXCEPTION 'The session (%, %, %) does not exist', in_cid, date_of_launch, in_sid;
    END IF;

    DELETE FROM Sessions S
    WHERE S.course_id = in_cid
      AND S.sid = in_sid
      AND S.launch_date = date_of_launch;
END;
$$ LANGUAGE plpgsql;
